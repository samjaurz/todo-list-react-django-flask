# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python application

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.13
      uses: actions/setup-python@v3
      with:
        python-version: "3.13"
    - name: Install poetry
      uses: abatilo/actions-poetry@v4
    - name: Setup a local virtual environment (if no poetry.toml file)
      run: |
          poetry config virtualenvs.create true --local
          poetry config virtualenvs.in-project true --local
    - uses: actions/cache@v3
      name: Define a cache for the virtual environment based on the dependencies lock file
      with:
          path: ./.venv
          key: venv-${{ hashFiles('poetry.lock') }}
    - name: Install the project dependencies
      run: poetry install
    - name: Test with pytest
      run: poetry run pytest -v
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
 
